{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6660242,"sourceType":"datasetVersion","datasetId":3843482}],"dockerImageVersionId":30587,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ravivarmaodugu/israelipalestinianconflicts-a-data-analyst-s-view?scriptVersionId=155837893\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"**Notebook Overview**\n\nHello, All! I am herewith presenting my new notebook **which I tailored around a self-devised theme â€“ 'How a data analyst sees the Israeli-Palestinian conflicts'.** \n\nA few days ago while browsing for a new dataset for my next notebook project, **I stumbled upon [this beautiful dataset](https://www.kaggle.com/datasets/willianoliveiragibin/fatalities-in-the-israeli-palestinian)**, which has a nicely compiled statistical account of conflicts occurring in Israel and Palestine since the year 2000. \n\n**Intrigued by the quality of the dataset, I decided to make a notebook out of the dataset.**\n\n**The 'Israeli_Palestinian_Conflicts |Data Analyst's View' notebook aims to analyse events and fatalities by**\n\n- *Year, month, and day of the month of events that led to fatalities*\n- *Victim profiles such as age, gender, citizenship, participation in hostilities etc*\n- *Event locations, location districts, and location regions*\n- *Type of injury, type of ammunition, and party responsible for killings, among others.*\n\nAnalysis is made using a diverse range of plots including pie charts, histograms, scatterplots, line graphs, bar charts (vertical, horizontal, stacked, and clustered], and violin plots, among others.\n\n**I hope you will enjoy the notebook theme, the contents in it, and the DataViz formats.**\n\n**So let's get started and delve into our notebook.**","metadata":{}},{"cell_type":"code","source":"## Import the relevant libraries into the environment\nimport numpy as np                ## linear algebra\nimport pandas as pd               ## data processing, dataset file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt   ## data visualization & graphical plotting\nimport seaborn as sns             ## to visualize random distributions\nimport plotly.express as px       ## data visualization & graphical plotting\n%matplotlib inline\n\npd.options.display.float_format = '{:.2f}'.format\n\nimport warnings                    ## Filter warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:04.196121Z","iopub.execute_input":"2023-12-20T16:50:04.19655Z","iopub.status.idle":"2023-12-20T16:50:04.208346Z","shell.execute_reply.started":"2023-12-20T16:50:04.19652Z","shell.execute_reply":"2023-12-20T16:50:04.207181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Load the dataset \ndf = pd.read_csv('/kaggle/input/fatalities-in-the-israeli-palestinian/fatalities_isr_pse_conflict_2000_to_2023.csv')\n\n## Check a few records in the dataset that we just loaded\ndf.head(5)","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:04.211097Z","iopub.execute_input":"2023-12-20T16:50:04.211553Z","iopub.status.idle":"2023-12-20T16:50:04.34333Z","shell.execute_reply.started":"2023-12-20T16:50:04.211511Z","shell.execute_reply":"2023-12-20T16:50:04.342302Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Check the dataset shape, duplicate entries, and missing values\nprint(f'\\033[94mNumber of records/rows & features/columns in the dataset are: {df.shape[0], df.shape[1]}')\nprint(f'\\033[94mNumber of duplicate entries in the dataset are: {df.duplicated().sum()}')\nprint(f'\\033[94mNumber missing values in the dataset are: {sum(df.isna().sum())}')","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:04.345712Z","iopub.execute_input":"2023-12-20T16:50:04.346651Z","iopub.status.idle":"2023-12-20T16:50:04.407298Z","shell.execute_reply.started":"2023-12-20T16:50:04.346608Z","shell.execute_reply":"2023-12-20T16:50:04.406188Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- From the output, we can see that there are about 7 duplicate entries in our dataset, and over 7500 missing values are also present. We will check them and try to solve them in our next steps.","metadata":{}},{"cell_type":"code","source":"## Let's get rid of duplicate entries\ndf.drop_duplicates(keep='first',inplace=True)\n\n## Again check the dataset shape, after removing the duplicate entries\nprint(f'\\033[94mNumber of records/rows & features/columns in the dataset are: {df.shape[0], df.shape[1]}')\nprint(f'\\033[94mNumber of duplicate entries in the dataset are: {df.duplicated().sum()}')","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:04.408917Z","iopub.execute_input":"2023-12-20T16:50:04.409375Z","iopub.status.idle":"2023-12-20T16:50:04.476701Z","shell.execute_reply.started":"2023-12-20T16:50:04.409331Z","shell.execute_reply":"2023-12-20T16:50:04.475591Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Now we will find out features that have null values\nmissing_val = df.isnull().sum()[df.isnull().sum() > 0]\nprint('missing values by feature')\nprint(missing_val)\nmissing_val_prc = missing_val / len(df)*100\nprint('missing values by feature, by % of total')\nprint(missing_val_prc)","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:04.479757Z","iopub.execute_input":"2023-12-20T16:50:04.480676Z","iopub.status.idle":"2023-12-20T16:50:04.528766Z","shell.execute_reply.started":"2023-12-20T16:50:04.480631Z","shell.execute_reply":"2023-12-20T16:50:04.52754Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- Of the 16 features we have in our dataset, 8 features contain missing values. \n- Of them, 'ammunition' and 'took_part_in_the_hostilities' features have highest number of missing values.\n- We will retain the null values as-is, and continue with our analysis.","metadata":{}},{"cell_type":"code","source":"## Have a glance at the dataframe with info() functions\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:04.530021Z","iopub.execute_input":"2023-12-20T16:50:04.530359Z","iopub.status.idle":"2023-12-20T16:50:04.562158Z","shell.execute_reply.started":"2023-12-20T16:50:04.530323Z","shell.execute_reply":"2023-12-20T16:50:04.561158Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- \"date_of_event\" & \"date_of_death\" features are in Object format, they need to be converted into datetime format","metadata":{}},{"cell_type":"code","source":"## Let's convert 'date_of_event' and 'date_of_death' to datetime format\ndf['event_date'] = pd.to_datetime(df['date_of_event']).dt.date\ndf['e_year'] = pd.to_datetime(df['date_of_event']).dt.year\ndf['e_month'] = pd.to_datetime(df['date_of_event']).dt.month\ndf['e_day'] = pd.to_datetime(df['date_of_event']).dt.day\n\ndf['death_date'] = pd.to_datetime(df['date_of_death']).dt.date\ndf['d_year'] = pd.to_datetime(df['date_of_death']).dt.year\ndf['d_month'] = pd.to_datetime(df['date_of_death']).dt.month\ndf['d_day'] = pd.to_datetime(df['date_of_death']).dt.day\n\nprint(df[['event_date', 'e_year', 'e_month', 'e_day']].head(5))\nprint(df[['death_date', 'd_year', 'd_month', 'd_day']].head(5))","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:04.563398Z","iopub.execute_input":"2023-12-20T16:50:04.564513Z","iopub.status.idle":"2023-12-20T16:50:04.646524Z","shell.execute_reply.started":"2023-12-20T16:50:04.564477Z","shell.execute_reply":"2023-12-20T16:50:04.645347Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Have a glance at the dataframe with describe() functions\ndf.describe(include='all').transpose()","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2023-12-20T16:50:04.647836Z","iopub.execute_input":"2023-12-20T16:50:04.648167Z","iopub.status.idle":"2023-12-20T16:50:04.780713Z","shell.execute_reply.started":"2023-12-20T16:50:04.648138Z","shell.execute_reply":"2023-12-20T16:50:04.779612Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Univariate Analysis\n## Fatalities data by year, month, day of the month \n\nsns.set(rc={'axes.facecolor':'none','axes.grid':False,'xtick.labelsize':13,'ytick.labelsize':13, 'figure.autolayout':True, 'figure.dpi':300, 'savefig.dpi':300})\nmy_col = ('#40E0D0', '#D2B48C','#c7e9b4', '#EEE8AA','#00FFFF','#FAEBD7','#FF6347', '#FAFAD2', '#E0EEEE', '#C1CDCD', '#838B8B', '#D8BFD8','#F4A460','#F08080', '#EE82EE', '#4682B4','#6A5ACD', '#00C78C', '#FFB6C1', '#8B5F65')\n\nplt.figure(figsize=(15,15))\n\nplt.subplot(321)\nplt.title('Number of Events Occured by Year : Lineplot', color='green', weight='bold', fontsize = 14)\nsns.lineplot(df['e_year'].value_counts().sort_values(), color='g', linewidth = 2)\nplt.ylabel(None), plt.xlabel(None)\n\nplt.subplot(322)\nplt.title('Number of Events Occured by Year : Barplot', color='#8B5A2B', weight='bold', fontsize=14)\nax = sns.countplot(x=df['e_year'], color='#D2B48C', alpha=0.6)\n\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+ p.get_width()/2, p.get_height() + 0.1), ha='center', va='bottom')\nplt.ylabel(None), plt.yticks([]), plt.xticks(fontsize=10, rotation=90), plt.xlabel(None)\n\nplt.subplot(323)\nplt.title('Number of Events Occured by Month : Lineplot', color='green', weight='bold', fontsize = 14)\nsns.lineplot(df['e_month'].value_counts().sort_values(), color='g', linewidth = 2)\nplt.ylabel(None), plt.xlabel(None)\n\nplt.subplot(324)\nplt.title('Number of Events Occured by Month : Barplot', color='#8B5A2B', weight='bold', fontsize=14)\nax = sns.countplot(x=df['e_month'], color='#D2B48C', alpha=0.6)\n\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+ p.get_width()/2, p.get_height() + 0.1), ha='center', va='bottom')\nplt.ylabel(None), plt.yticks([]), plt.xticks(fontsize=10, rotation=90), plt.xlabel(None)\n\nplt.subplot(325)\nplt.title('Number of Events Occured by Day : Lineplot', color='green', weight='bold', fontsize = 14)\nsns.lineplot(df['e_day'].value_counts().sort_values(), color='g', linewidth = 2)\nplt.ylabel(None), plt.xlabel(None)\n\nplt.subplot(326)\nplt.title('Number of Events Occured by Day : Barplot', color='#8B5A2B', weight='bold', fontsize=14)\nax = sns.countplot(x=df['e_day'], color='#D2B48C', alpha=0.6)\n\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+ p.get_width()/2, p.get_height() + 0.1), ha='center', va='bottom')\nplt.ylabel(None), plt.yticks([]), plt.xticks(fontsize=10, rotation=90), plt.xlabel(None)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:04.782138Z","iopub.execute_input":"2023-12-20T16:50:04.782492Z","iopub.status.idle":"2023-12-20T16:50:10.3262Z","shell.execute_reply.started":"2023-12-20T16:50:04.782451Z","shell.execute_reply":"2023-12-20T16:50:10.325337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n\n- As you can see, several fatalities happened during the year 2014. \n- Google search tells you that it is because of 2014 Gaza War, which occurred during the months of July and August.","metadata":{}},{"cell_type":"code","source":"## Bivariate Analysis\n## Fatalities data by year & citizenship\n\nplt.subplots(figsize=(14,10))\n\nplt.subplot(211)\nplt.title('Fatalities â€“ Total, Palestinian, & Israeli : Lineplot', color='green', weight='bold', fontsize = 16)\ndf['d_year'].value_counts()[df.d_year.unique()].plot(kind='line', label= 'Total Fatalities', color = '#40E0D0', alpha=1, linewidth=4)\ndf['d_year'][df['citizenship'] == 'Palestinian'].value_counts()[df.d_year.unique()].plot(kind='line', label= 'Palestinian Fatalities', color = '#D2B48C', alpha=1, linewidth=4)\ndf['d_year'][df['citizenship'] == 'Israeli'].value_counts()[df.d_year.unique()].plot(kind='line', label= 'Israeli Fatalities', color = '#c7e9b4', alpha=1, linewidth=4)\nplt.legend(loc='upper right', fontsize=14)\n\nplt.subplot(212)\nplt.title('Fatalities by Citizenship : Clustered Barplot', color='green', weight='bold', fontsize = 16)\nsns.countplot(x=df['d_year'], hue=df['citizenship'], palette=my_col, edgecolor = \"black\", saturation=1)\nplt.legend(loc='upper right', fontsize=14)\nplt.xlabel(None), plt.ylabel(None)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:10.327514Z","iopub.execute_input":"2023-12-20T16:50:10.328034Z","iopub.status.idle":"2023-12-20T16:50:12.864394Z","shell.execute_reply.started":"2023-12-20T16:50:10.328003Z","shell.execute_reply":"2023-12-20T16:50:12.863355Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n\n- From the graphs, it is understood that Palestinian fatalities are far more higher than Israeli fatalities. \n- Although, Palestinian fatalities are way higher, fatalities on Israeli side remain prevalent throughout all the years, in smaller numbers.","metadata":{}},{"cell_type":"code","source":"## Univariate Analysis\n## Fatalities by Age\n## Fatalities by Region\n## Fatalities by Gender\n## Fatalities by Citizenship\n\nplt.subplots(figsize=(15,20))\n\nplt.subplot(431)\nplt.title('Fatalities by Age : Histogram', color='#00868B', weight='bold', fontsize=14)\nsns.histplot(df['age'], color=\"#40E0D0\", bins=28, stat='count')\nplt.yticks([]), plt.ylabel(None), plt.xlabel(None)\n\nplt.subplot(432)\nplt.title('Fatalities by Age : Violin Plot', color='#8B5A2B', weight='bold', fontsize=14)\nsns.violinplot(df['age'], color=\"#D2B48C\", orient='h')\nplt.xlabel(None), plt.ylabel(None), plt.yticks([])\n\nplt.subplot(433)\nplt.title('Fatalities by Age : Scatter Plot', color='#FF6347', weight='bold', fontsize=14)\nsns.scatterplot(df['age'], color=\"#FF6347\", alpha=0.3)\nplt.xlabel(None), plt.ylabel(None)\n\nplt.subplot(434)\nplt.title('Fatalities by Gender : Barplot', color='#00868B', weight='bold', fontsize=14)\nax = sns.countplot(x=df['gender'], facecolor=(1,1,1,1), linewidth=4, edgecolor=sns.color_palette(my_col, 20), order=df['gender'].value_counts().index)\n\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+ p.get_width()/2, p.get_height() + 120), ha='center', va='bottom')\nplt.xlabel(None), plt.ylabel(None), plt.yticks([])\n\nplt.subplot(435)\nplt.title('Fatalities by Citizenship : Barplot', color='#00868B', weight='bold', fontsize=14)\nax = sns.countplot(y=df['citizenship'], facecolor=(1,1,1,1), linewidth=4, edgecolor=sns.color_palette(my_col, 20), order=df['citizenship'].value_counts().index)\n\nfor p in ax.patches:\n    ax.annotate('{:.0f}'.format(p.get_width()),  (p.get_x() + p.get_width() + 200, p.get_y()+0.5))\nplt.ylabel(None), plt.xlabel(None), plt.xticks([])\n\nplt.subplot(436)\nplt.title('Fatalities by Event Location Region : Barplot', color='#00868B', weight='bold', fontsize=14)\nax = sns.countplot(x=df['event_location_region'], facecolor=(1,1,1,1), linewidth=4, edgecolor=sns.color_palette(my_col, 20), order=df['event_location_region'].value_counts().index)\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+ p.get_width()/2, p.get_height() + 120), ha='center', va='bottom')\nplt.xlabel(None), plt.ylabel(None), plt.yticks([])\n\nplt.subplot(437)\nplt.title('Fatalities by Gender : Pie Chart', color='#00868B', weight='bold', fontsize=14)\nmy_xpl = [0.0, 0.05]\ndf['gender'].value_counts().plot(kind='pie', colors=my_col, explode=my_xpl, legend=None, ylabel='', counterclock=False, startangle=150, wedgeprops={'alpha':0.3, 'edgecolor' : 'green','linewidth': 2, 'antialiased': True}, autopct='%1.1f')\n\nplt.subplot(438)\nplt.title('Fatalities by Citizenship : Pie Chart', color='#00868B', weight='bold', fontsize=14)\nmy_xpl = [0.0, 0.0, 0.3, 0.6]\ndf['citizenship'].value_counts().plot(kind='pie', colors=my_col, explode=my_xpl, legend=None, ylabel='', counterclock=False, startangle=150, wedgeprops={'alpha':0.3, 'edgecolor' : 'green', 'linewidth': 2, 'antialiased': True}, autopct='%1.1f')\n\nplt.subplot(439)\nmy_xpl = [0.0, 0.0, 0.20]\nplt.title('Fatalities by Event Location Region : Pie Chart', color='#00868B', weight='bold', fontsize=14)\ndf['event_location_region'].value_counts().plot(kind='pie', colors=my_col, legend=None, explode=my_xpl, ylabel='', counterclock=False, startangle=150, wedgeprops={'alpha':0.2, 'edgecolor' : 'black','linewidth': 2, 'antialiased': True}, autopct='%1.1f')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:12.869065Z","iopub.execute_input":"2023-12-20T16:50:12.869757Z","iopub.status.idle":"2023-12-20T16:50:17.079706Z","shell.execute_reply.started":"2023-12-20T16:50:12.869708Z","shell.execute_reply":"2023-12-20T16:50:17.078322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n\n- By age, people in the ages from late teens to late 20s are among the highest in numbers, in overall fatalities volume.\n- In particular, fatalities of people in the ages 18-24 is highest.\n- By gender, men have died more, representing about 87% of overall fatalities.\n- By citizenship, more Palestinians have died, accounting for around 91% of all fatalities.\n- By Event Location, Gaza Strip has highest number of fatalities, followed by West Bank. ","metadata":{}},{"cell_type":"code","source":"## Bivariate & Multivariate Analysis\n## Fatalities by Age, Region, Citizenship, & Gender\n\nplt.subplots(figsize=(15,15))\n\nplt.subplot(331)\nplt.title('Fatalities by Gender â€“ Israel (%)', color='green', weight='bold', fontsize=16)\ndf[df['event_location_region'] == 'Israel']['gender'].value_counts().plot(kind='pie', subplots=True, colors = my_col, legend=None, ylabel='', wedgeprops= {\"alpha\": 0.5}, autopct='%1.1f%%')\n\nplt.subplot(332)\nplt.title('Fatalities by Gender â€“ West Bank (%)', color='green', weight='bold', fontsize=16)\ndf[df['event_location_region'] == 'West Bank']['gender'].value_counts().plot(kind='pie', subplots=True, colors = my_col, legend=None, ylabel='', wedgeprops= {\"alpha\": 0.5}, autopct='%1.1f%%')\n\nplt.subplot(333)\nplt.title('Fatalities by Gender â€“ Gaza Strip (%) ', color='green', weight='bold', fontsize=16)\ndf[df['event_location_region'] == 'Gaza Strip']['gender'].value_counts().plot(kind='pie', subplots=True, colors = my_col, legend=None, ylabel='', wedgeprops= {\"alpha\": 0.5}, autopct='%1.1f%%')\n\nplt.subplot(334)\nplt.title('Fatalities by Region, Gender : Clusteredbar Plot', color='green', weight='bold', fontsize=13)\nax = sns.countplot(x=df['event_location_region'], hue=df['gender'], palette=my_col, saturation=0.5)\nfor p in ax.patches:\n   ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.03, p.get_height()+100))\nplt.xlabel(None), plt.ylabel(None), plt.yticks([])\n\nplt.subplot(335)\n\nplt.title('Fatalities by Region, Gender, Age:Boxplot', color='green', weight='bold', fontsize=13)\nsns.boxplot(x=df['gender'], y=df['age'], hue=df['event_location_region'], palette=my_col)\nplt.legend(bbox_to_anchor=(1.02, 1), loc='best', borderaxespad=0)\nplt.xlabel(None), plt.ylabel(None)\n\n\nplt.subplot(336)\nplt.title('Fatalities by Region, Gender, Age : Violinplot', color='green', weight='bold', fontsize=13)\nsns.violinplot(x=df['gender'], y=df['age'], hue=df['event_location_region'], palette=my_col, saturation=0.5)\nplt.legend(bbox_to_anchor=(1.02, 1), loc='best', borderaxespad=0)\nplt.xlabel(None), plt.ylabel(None)\n\nplt.subplot(337)\nplt.title('Fatalities by Gender, Citizenship: Clusteredbar Plot', color='green', weight='bold', fontsize=13)\nax = sns.countplot(x=df['gender'], hue=df['citizenship'], palette=my_col)\n\nfor p in ax.patches:\n   ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.02, p.get_height()+100))\n\nplt.legend(bbox_to_anchor=(1.02, 1), loc='best', borderaxespad=0)\nplt.xlabel(None), plt.ylabel(None), plt.yticks([])\n\nplt.subplot(338)\nplt.title('Fatalities by Gender, Citizenship, Age : Violinplot', color='green', weight='bold', fontsize=13)\nsns.violinplot(x=df['gender'], y=df['age'], hue=df['citizenship'], palette=my_col, saturation=0.5)\nplt.legend(bbox_to_anchor=(1.02, 1), loc='best', borderaxespad=0)\nplt.xlabel(None), plt.ylabel(None)\n\nplt.subplot(339)\nplt.title('Fatalities by Gender, Citizenship, Age : Boxplot', color='green', weight='bold', fontsize=13)\nsns.boxplot(x=df['gender'], y=df['age'], hue=df['citizenship'], palette=my_col)\nplt.legend(bbox_to_anchor=(1.02, 1), loc='best', borderaxespad=0)\nplt.xlabel(None), plt.ylabel(None)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:17.081407Z","iopub.execute_input":"2023-12-20T16:50:17.082053Z","iopub.status.idle":"2023-12-20T16:50:22.228666Z","shell.execute_reply.started":"2023-12-20T16:50:17.082014Z","shell.execute_reply":"2023-12-20T16:50:22.227399Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n\n- Women fatalities in Israel is peculiarly higher than women fatalities in Gaza Strip and West Bank.\n- Mean age of Israeli fatalities is typically higher than Palestinians, in both men and women's categories.","metadata":{}},{"cell_type":"code","source":"## Analysis by \"Event Location District\" & \"Event Location Region\"\nplt.figure(figsize=(13,16))\n\nplt.subplot(311)\nplt.title('Event Location District - All : Bar Chart', color='#00868B', weight='bold', fontsize=14)\nax = sns.countplot(x=df['event_location_district'], palette=my_col, saturation=0.4, order=df['event_location_district'].value_counts().index)\n\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.05, p.get_height()+75))\n\nplt.ylabel(None), plt.xlabel(None), plt.yticks([]), plt.xticks(rotation=30, fontsize=10)\n\nplt.subplot(312)\nmy_xpl = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10, 0.20, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 1.15]\nplt.title('Event Location District : Pie Chart', color='#00868B', weight='bold', fontsize=14)\ndf['event_location_district'].value_counts().plot(kind='pie', colors=my_col, legend=None, explode=my_xpl, ylabel='', counterclock=False, startangle=150, wedgeprops={'alpha':0.5, 'edgecolor' : 'green','linewidth': 1, 'antialiased': True}, autopct='%1.1f')\n\nplt.subplot(313)\nplt.title('Event Location District by Event Location Region : Clustered Bar Chart', color='#00868B', weight='bold', fontsize=14)\nsns.countplot(x=df['event_location_region'], hue=df['event_location_district'], palette= my_col, saturation=0.4, hue_order=df['event_location_district'].value_counts().index)\nplt.legend(bbox_to_anchor=(0.85, 0.1), loc='best', borderaxespad=0, fontsize=10)\nplt.ylabel(None), plt.xlabel(None)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:22.230058Z","iopub.execute_input":"2023-12-20T16:50:22.230415Z","iopub.status.idle":"2023-12-20T16:50:25.650277Z","shell.execute_reply.started":"2023-12-20T16:50:22.230384Z","shell.execute_reply":"2023-12-20T16:50:25.649154Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n\n- Gaza is the most affected Event Location District, with nearly 22% share of total fatalities.\n- North Gaza, Khan Yunis, Rafah, and Dier al-Balah, are other major affected districts. ","metadata":{}},{"cell_type":"code","source":"## Gaza Strip & West Bank have most affecetd districts\n## Let's visialise these two regions, individually\nplt.figure(figsize=(14,6))\n\nplt.subplot(121)\nmy_xpl = [0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.6]\nplt.title('Most Affecetd Districts - Gaza Strip (Pie Chart)', color='green', weight='bold', fontsize=14)\ndf[df['event_location_region'] == 'Gaza Strip']['event_location_district'].value_counts().plot.pie(colors = my_col, explode=my_xpl, subplots=True, legend=None, ylabel='', counterclock=False, startangle=180, wedgeprops= {\"alpha\": 0.5}, autopct='%1.1f')\n\nplt.subplot(122)\nmy_xpl = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\nplt.title('Most Affecetd Districts - West Bank (Pie Chart)', color='green', weight='bold', fontsize=14)\ndf[df['event_location_region'] == 'West Bank']['event_location_district'].value_counts().plot.pie(colors = my_col, explode=my_xpl, subplots=True, legend=None, ylabel='', counterclock=False, startangle=180, wedgeprops= {\"alpha\": 0.5}, autopct='%1.1f')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:25.651571Z","iopub.execute_input":"2023-12-20T16:50:25.65192Z","iopub.status.idle":"2023-12-20T16:50:26.859207Z","shell.execute_reply.started":"2023-12-20T16:50:25.65189Z","shell.execute_reply":"2023-12-20T16:50:26.85836Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n\n- **In the Gaza Strip, Gaza and North Gaza** have the highest number of fatalities, with over 55% share of total fatalities.\n- Khan Yunis, Rafah and Deir al-Balah are other most affected districts in the Gaza Strip.\n- **In the West Bank, Nablus and Jenin** are the most affected district.\n- Ramallah and al-Bira, Hebron, Tulkarm, and Bethlehem are other most affected districts in the West Bank.","metadata":{}},{"cell_type":"code","source":"## Analysis by Event Location\n\nplt.subplots(figsize=(16,12))\n\nplt.subplot(211)\nplt.title('All Event Locations : Bar Chart', color='green', weight='bold', fontsize=16)\nax = sns.countplot(x=df['event_location'], palette='Greens_r', alpha=1, order=df['event_location'].value_counts().index)\n\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.05, p.get_height()+3))\nplt.xticks(rotation=90), plt.xlabel(None), plt.ylabel(None), plt.yticks([]), plt.xticks(fontsize=4)\n\nplt.subplot(212)\nplt.title('Top 30 Event Locations : Bar Chart', color='green', weight='bold', fontsize=16)\nax = sns.countplot(x=df['event_location'], palette='Greens', alpha=1, order=df['event_location'].value_counts().head(30).index)\n\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.05, p.get_height()+25))\nplt.xticks(rotation=90), plt.xlabel(None), plt.ylabel(None), plt.yticks([])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:26.860512Z","iopub.execute_input":"2023-12-20T16:50:26.861277Z","iopub.status.idle":"2023-12-20T16:50:41.913725Z","shell.execute_reply.started":"2023-12-20T16:50:26.861244Z","shell.execute_reply":"2023-12-20T16:50:41.912542Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n\n- Gaza city is the most affected Event location. Most number of fatalities have taken place there.\n- Rafah, Khan Yunis, Jabalya R.C., and Beit Lahiya are other event locations.","metadata":{}},{"cell_type":"code","source":"## Let's do fatalities analysis by Type of Injury, Ammunition, Killed By, Whether Took Part in Hostilities\n## First we will check the segment count in each feature to streamline, if needed\nprint('\\n', 'type_of_injury', '\\n','-'*40,'\\n', df['type_of_injury'].value_counts())\nprint('\\n','ammunition','\\n','-'*40,'\\n', df['ammunition'].value_counts())\nprint('\\n','killed_by','\\n','-'*40,'\\n', df['killed_by'].value_counts())\nprint('\\n','took_part_in_the_hostilities','\\n','-'*40,'\\n', df['took_part_in_the_hostilities'].value_counts())","metadata":{"_kg_hide-output":true,"_kg_hide-input":true,"execution":{"iopub.status.busy":"2023-12-20T16:50:41.915543Z","iopub.execute_input":"2023-12-20T16:50:41.916066Z","iopub.status.idle":"2023-12-20T16:50:41.937568Z","shell.execute_reply.started":"2023-12-20T16:50:41.916026Z","shell.execute_reply":"2023-12-20T16:50:41.936685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## We will club the smaller segments in \"type_of_injury\" & \"ammunition\" varibles into a new \"Others\" segment\ndf['type_of_injury'].replace(['stabbing', 'house demolition','hit by a vehicle', 'beating', 'stones throwing', 'being bludgeoned with an axe', 'fire', 'physically assaulted', 'physical assault', 'Strangulation'], 'Other_Inju', inplace=True, regex=True)\ndf['type_of_injury'].replace(['gunOther_Inju'], 'gunfire', inplace=True, regex=True)\nprint('\\n', 'Revised Type of Injury feature', '\\n','-'*40,'\\n', df['type_of_injury'].value_counts())\n\n## Now we will check how these features have been transformed\ndf['ammunition'].replace(['mortar fire', 'knife', 'flechette shells', 'rubber-coated metal bullets', '0.22-caliber bullets', 'phosphorus shell', 'Qassam rocket', 'car bomb', 'teargas canister', 'rocket', 'grad rocket', 'sponge rounds', 'grenade', 'flare bomb', 'stun grenade', 'rock'], 'Other_Ammu', inplace=True, regex=True)\ndf['ammunition'].replace(['grad Other_Ammu', 'stun Other_Ammu'], 'Other_Ammu', inplace=True, regex=True)\nprint('\\n', 'Revised Ammunition feature', '\\n','-'*40, '\\n', df['ammunition'].value_counts())","metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"execution":{"iopub.status.busy":"2023-12-20T16:50:41.938895Z","iopub.execute_input":"2023-12-20T16:50:41.939435Z","iopub.status.idle":"2023-12-20T16:50:42.413489Z","shell.execute_reply.started":"2023-12-20T16:50:41.939403Z","shell.execute_reply":"2023-12-20T16:50:42.412586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Univariate Analysis\n## Type of Injury, Ammunition, Group Responsible for Fatalities\n\nplt.subplots(figsize=(16,15))\n\nplt.subplot(321)\nplt.title('Fatalities by Type of Injury : Bar Chart', color='#00868B', weight='bold', fontsize=14)\nax = sns.countplot(y=df['type_of_injury'], palette=my_col, saturation=0.6)\n\nfor p in ax.patches:\n    ax.annotate('{:.0f}'.format(p.get_width()),  (p.get_x() + p.get_width() + 200, p.get_y()+0.5))\nplt.ylabel(None), plt.xlabel(None), plt.xticks([])\n\nplt.subplot(322)\nplt.title('Fatalities by Ammunition : Bar Chart', color='#00868B', weight='bold', fontsize=14)\nax = sns.countplot(x=df['ammunition'], palette=my_col, saturation=0.2)\nfor p in ax.patches: \n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+ p.get_width()/2, p.get_height() + 80), ha='center', va='bottom')\nplt.xticks(rotation=30), plt.xlabel(None), plt.ylabel(None), plt.yticks([])\n\nplt.subplot(323)\nplt.title('Fatalities by Type of Injury : Pie Chart', color='#00868B', weight='bold', fontsize=14)\nmy_xpl = [0.0, 0.0, 0.1, 0.20]\ndf['type_of_injury'].value_counts().plot(kind='pie', colors=my_col, explode=my_xpl, legend=None, ylabel='', counterclock=False, startangle=150, wedgeprops={'alpha':0.5, 'edgecolor' : 'white','linewidth': 0.5, 'antialiased': True}, autopct='%1.1f')\n\nplt.subplot(324)\nplt.title('Fatalities by Ammunition : Pie Chart', color='#00868B', weight='bold', fontsize=14)\nmy_xpl = [0.0, 0.0, 0.0, 0.1, 0.2, 0.3]\ndf['ammunition'].value_counts().plot(kind='pie', colors=my_col, explode=my_xpl, legend=None, ylabel='', counterclock=False, startangle=150, wedgeprops={'alpha':0.5, 'edgecolor' : 'white','linewidth': 0.5, 'antialiased': True}, autopct='%1.1f')\n\nplt.subplot(325)\nplt.title('Group Responsible for Fatalities : Bar Chart', color='green', weight='bold', fontsize=14)\nax = sns.countplot(y=df['killed_by'], facecolor=(1,1,1,1), linewidth=4, edgecolor=sns.color_palette(my_col, 20), order=df['killed_by'].value_counts().index)\n\nfor p in ax.patches:\n    ax.annotate('{:.0f}'.format(p.get_width()),  (p.get_x() + p.get_width() + 200, p.get_y()+0.4))\nplt.ylabel(None), plt.xlabel(None), plt.xticks([])\n\nplt.subplot(326)\nplt.title('Group Responsible for Fatalities : Pie Chart', color='#00868B', weight='bold', fontsize=14)\nmy_xpl = [0.0, 0.0, 0.1]\ndf['killed_by'].value_counts().plot(kind='pie', colors=my_col, explode=my_xpl, legend=None, ylabel='', counterclock=False, startangle=150, wedgeprops={'alpha':0.5, 'edgecolor' : 'white','linewidth': 0.5, 'antialiased': True}, autopct='%1.1f')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:42.414895Z","iopub.execute_input":"2023-12-20T16:50:42.415812Z","iopub.status.idle":"2023-12-20T16:50:45.454245Z","shell.execute_reply.started":"2023-12-20T16:50:42.415771Z","shell.execute_reply":"2023-12-20T16:50:45.453006Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n\n- Gunfire is the cause of most number of fatalities.\n- Missiles category is leading ammunition type, followed by live ammunition, and shelling.","metadata":{}},{"cell_type":"code","source":"## Multivariate Analysis\n## Group Responsible for Fatalities, Age, Gender, Type of Injury, Ammunition, Participation\n\nplt.subplots(figsize=(15,10))\n\nplt.subplot(221)\nplt.title('Group Responsible, by Age, by Gender : Violinplot', color='green', weight='bold', fontsize=14)\nsns.violinplot(x=df['killed_by'], y=df['age'], hue=df['gender'], palette=my_col, split=True, gap=.1, saturation=0.5)\n\nplt.xlabel(None), plt.ylabel(None)\n\nplt.subplot(222)\nplt.title('Group Responsible, by Age & Participation : Violinplot', color='green', weight='bold', fontsize=14)\nsns.violinplot(x=df['killed_by'], y=df['age'], hue=df['took_part_in_the_hostilities'], palette=my_col)\n\nplt.xlabel(None), plt.ylabel(None)\n\nplt.subplot(223)\nplt.title('Group Responsible, by Ammunition:Clusteredbar Chart', color='green', weight='bold', fontsize=14)\nax = sns.countplot(x=df['killed_by'], hue=df['ammunition'], palette=my_col, edgecolor = \"black\", saturation=0.8)\nfor p in ax.patches:\n    ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+ p.get_width()/2, p.get_height() + 70), ha='center', va='bottom')\nax.set_xlabel(None), ax.set_ylabel(None), ax.set_yticks([])\nplt.legend(bbox_to_anchor=(0.9, 1), loc='best', borderaxespad=0)\n\nax = plt.subplot(224)\nplt.title('Group Responsible, by Injury Type:Stackedbar Chart', color='green', weight='bold', fontsize=14)\nax = pd.crosstab(df['killed_by'], df['type_of_injury'], normalize = \"index\").plot.bar(stacked=True, color=my_col, alpha=0.8, ax=ax)\n\nfor c in ax.containers:\n    ax.bar_label(c, fmt='{:.2%}', label_type='center')\nax.set_xlabel(None), ax.set_ylabel(None), ax.set_yticks([]), plt.xticks(rotation = 0)\nplt.legend(bbox_to_anchor=(0.5, 0.8), loc='best', borderaxespad=0)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:50:45.456378Z","iopub.execute_input":"2023-12-20T16:50:45.45684Z","iopub.status.idle":"2023-12-20T16:50:48.723246Z","shell.execute_reply.started":"2023-12-20T16:50:45.456798Z","shell.execute_reply":"2023-12-20T16:50:48.722087Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Some Observations**\n \n - A majority of Israeli civilians (89%) and Israeli security forces (96%) were killed by gunfire.\n - Whereas, narly 50% of Palestinian fatalities were due to explosion, and 43% were due to gunfire.","metadata":{}},{"cell_type":"code","source":"pip install folium","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2023-12-20T16:50:48.724772Z","iopub.execute_input":"2023-12-20T16:50:48.725189Z","iopub.status.idle":"2023-12-20T16:51:02.516586Z","shell.execute_reply.started":"2023-12-20T16:50:48.725151Z","shell.execute_reply":"2023-12-20T16:51:02.515047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import folium\nfrom folium import plugins","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:51:02.518876Z","iopub.execute_input":"2023-12-20T16:51:02.520074Z","iopub.status.idle":"2023-12-20T16:51:02.527051Z","shell.execute_reply.started":"2023-12-20T16:51:02.520029Z","shell.execute_reply":"2023-12-20T16:51:02.525877Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Generate a heat map of event location districts with Folium library\n## Define latitude and longitude for the Event location districts in our dataset\n## Note: Collected the Lat-Long coordinates manually from website : https://www.gps-coordinates.net/\n\nlat_longs = [\n    [31.5050311,34.4641381], #Gaza\n    [31.5501268,34.5033134], #North Gaza\n    [31.3457612,34.3025277], #Khan Yunis\n    [31.2752047,34.2558269], #Rafah\n    [31.4183455,34.3502476], #Deir al-Balah\n    [31.89096313966111,37.850288931736976], #Israel\n    [32.2205316,35.2569374], #Nablus\n    [32.4618837,35.297566], #Jenin\n    [31.9106212,35.2088129], #Ramallah and al-Bira\n    [31.5304303,35.0879406], #Hebron\n    [32.3111468,35.0275505], #Tulkarm\n    [31.7043556,35.2061876], #Bethlehem\n    [31.78336,35.23388], #East Jerusalem\n    [31.8912806,35.2003213], #al-Quds\n    [31.42507,34.3734], #Gush Katif\n    [32.18966,34.97063], #Qalqiliya\n    [32.3234392,35.3693661], #Tubas\n    [31.855991,35.4598851], #Jericho\n    [32.0851611,35.1815442], #Salfit\n]\n\n## Setup event location district heat map with folium\nevent_location_district_heat_map = folium.Map(location= [31.90, 34.80], zoom_start=8)\n\n## Add lat_longs data to folium event location district heat map\nevent_location_district_heat_map.add_child(plugins.HeatMap(lat_longs, min_opacity=0.6, radius=18))\n\n## Display heat map\nevent_location_district_heat_map","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:51:02.528639Z","iopub.execute_input":"2023-12-20T16:51:02.529032Z","iopub.status.idle":"2023-12-20T16:51:02.571442Z","shell.execute_reply.started":"2023-12-20T16:51:02.528997Z","shell.execute_reply":"2023-12-20T16:51:02.570233Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- By looking at the heat map, you can figure out that Gaza (at the lower left corner) and West bank (on north eastern part of Israel) have highest number of events.","metadata":{}},{"cell_type":"code","source":"## Let's take a look at Word Cloud plot of the \"notes\" feature (the last column)\n## Word Cloud lets us know which words occured most number of times in a particular dataset\n\n## Import WordCloud module from wordcloud library\nfrom wordcloud import WordCloud\n\n## Set comment words\ncloud_of_words = ''.join(df['notes'].astype(str))\n\n## Generate a Word Cloud\nfacecolor = 'white'\nwordcloud = WordCloud(width=1000, height=700,background_color=facecolor, \n            min_font_size=10, max_font_size=160).generate(cloud_of_words)\n\n## Plot the World Cloud image\nplt.figure(figsize=(12,6))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.xticks([]), plt.yticks([])\nplt.title('Most Frequently Occuring Words in the Notes Feature of the Dataset', color='coral', weight='bold', fontsize=10, pad=15)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-20T16:51:02.573212Z","iopub.execute_input":"2023-12-20T16:51:02.573668Z","iopub.status.idle":"2023-12-20T16:51:06.209893Z","shell.execute_reply.started":"2023-12-20T16:51:02.573629Z","shell.execute_reply":"2023-12-20T16:51:06.208626Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<p style=\"float:right; font-family:Calibri (Body); color:black; font-size:14px;\" > <br>Here we conclude our notebook.... <br> <br>I hope you will find the notebook relevant and useful.... <br> <br>Please do share your opinions, thoughts and feedback (if any) in the comments section.... <br> <br><b>THANK YOU<b>...... <br>","metadata":{}}]}